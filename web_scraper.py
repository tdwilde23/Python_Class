from bs4 import BeautifulSoup
import requests
import time
from requests.structures import CaseInsensitiveDict

page_headers = CaseInsensitiveDict()
page_headers["cookie"] = "ASP.NET_SessionId=sw4jcskcegkwwojlvptzclfh"
page_headers["Content-Type"] = "application/x-www-form-urlencoded"

for letter in range(26):
    char = chr(65 + letter)
    print(f'Started scanning plants that start with {char}')
    time.sleep(60)
    url = f'https://pfaf.org/user/DatabaseSearhResult.aspx?LatinName={char}'

    next_letter = False
    first_plant = {}
    for page in range(1,17):
        time.sleep(10)
        data =f'__EVENTTARGET=ctl00%24ContentPlaceHolder1%24gvresults&__EVENTARGUMENT=Page%24{page}&__VIEWSTATE=%2FwEPDwULLTEwNTYxMTMzNDIPFgQeDXNvcnREaXJlY3Rpb24FA2FzYx4Oc29ydEV4cHJlc3Npb24FCUxhdGluTmFtZRYCZg9kFgICAw9kFgICAw9kFggCAQ8PFgIeBFRleHQFF0luZGV4IG9mIExhdGluIE5hbWVzOiBNZGQCBw88KwARAwAPFgQeC18hRGF0YUJvdW5kZx4LXyFJdGVtQ291bnQCvwNkARAWABYAFgAMFCsAABYCZg9kFsoBAgEPZBYYZg9kFgJmDw8WBB8CBQ5BY2FjaWEgY2F0ZWNodR4LTmF2aWdhdGVVcmwFI1BsYW50LmFzcHg%2FTGF0aW5OYW1lPUFjYWNpYSBjYXRlY2h1ZGQCAQ8PFgIfAgUaQ3V0Y2ggdHJlZSwgQ2F0ZWNodSBhY2FjaWFkZAICDw8WAh8CBQRUcmVlZGQCAw8PFgIfAgUEMTUuMGRkAgQPZBYCZg8VAgIxMAIxMmQCBQ8PFgIfAgUBRmRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATFkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUBM2RkAgIPZBYYZg9kFgJmDw8WBB8CBRBBY2FjaWEgZGVjdXJyZW5zHwUFJVBsYW50LmFzcHg%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%2FTGF0aW5OYW1lPUFybmViaWEgYmVudGhhbWlpZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDMC45ZGQCBA9kFgJmDxUCATYBOWQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUBTGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATBkZAIKDw8WAh8CBQExZGQCCw8PFgIfAgUGJm5ic3A7ZGQCCQ9kFhhmD2QWAmYPDxYEHwIFEEFybmViaWEgZXVjaHJvbWEfBQUlUGxhbnQuYXNweD9MYXRpbk5hbWU9QXJuZWJpYSBldWNocm9tYWRkAgEPDxYCHwIFBiZuYnNwO2RkAgIPDxYCHwIFCVBlcmVubmlhbGRkAgMPDxYCHwIFAzAuM2RkAgQPZBYCZg8VAgAAZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQFMZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBMGRkAgoPDxYCHwIFATJkZAILDw8WAh8CBQYmbmJzcDtkZAIKD2QWGGYPZBYCZg8PFgQfAgUPQXJ1bmRpbmFyaWEgc3BwHwUFJFBsYW50LmFzcHg%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%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%2FTGF0aW5OYW1lPURpc3BoeW1hIGF1c3RyYWxlZGQCAQ8PFgIfAgUOUGlnJiMzOTtzIEZhY2VkZAICDw8WAh8CBQlQZXJlbm5pYWxkZAIDDw8WAh8CBQMwLjFkZAIED2QWAmYPFQIBOAIxMWQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUCTE1kZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQExZGQCCg8PFgIfAgUBMGRkAgsPDxYCHwIFBiZuYnNwO2RkAhsPZBYYZg9kFgJmDw8WBB8CBRlEcmFjb2NlcGhhbHVtIHBhcnZpZmxvcnVtHwUFLlBsYW50LmFzcHg%2FTGF0aW5OYW1lPURyYWNvY2VwaGFsdW0gcGFydmlmbG9ydW1kZAIBDw8WAh8CBRNBbWVyaWNhbiBEcmFnb25oZWFkZGQCAg8PFgIfAgUPQW5udWFsL0JpZW5uaWFsZGQCAw8PFgIfAgUDMS4wZGQCBA9kFgJmDxUCATYBOWQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUCU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMWRkAgoPDxYCHwIFATFkZAILDw8WAh8CBQYmbmJzcDtkZAIcD2QWGGYPZBYCZg8PFgQfAgUSRW5zZXRlIHZlbnRyaWNvc3VtHwUFJ1BsYW50LmFzcHg%2FTGF0aW5OYW1lPUVuc2V0ZSB2ZW50cmljb3N1bWRkAgEPDxYCHwIFI0V0aGlvcGlhbiBCYW5hbmEsIEFieXNzaW5pYW4gYmFuYW5hZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDNi4wZGQCBA9kFgJmDxUCATkCMTFkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMmRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQYmbmJzcDtkZAIdD2QWGGYPZBYCZg8PFgQfAgUTRXJpb2JvdHJ5YSBqYXBvbmljYR8FBShQbGFudC5hc3B4P0xhdGluTmFtZT1FcmlvYm90cnlhIGphcG9uaWNhZGQCAQ8PFgIfAgUXTG9xdWF0LCBKYXBhbmVzZSBMb3F1YXRkZAICDw8WAh8CBQRUcmVlZGQCAw8PFgIfAgUDOS4wZGQCBA9kFgJmDxUCATgCMTFkAgUPDxYCHwIFAU1kZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBNGRkAgoPDxYCHwIFATNkZAILDw8WAh8CBQEyZGQCHg9kFhhmD2QWAmYPDxYEHwIFD0dsdXRhIGxhY2NpZmVyYR8FBSRQbGFudC5hc3B4P0xhdGluTmFtZT1HbHV0YSBsYWNjaWZlcmFkZAIBDw8WAh8CBQxMYWNxdWVyIHRyZWVkZAICDw8WAh8CBQRUcmVlZGQCAw8PFgIfAgUEMTguMGRkAgQPZBYCZg8VAgIxMAIxMmQCBQ8PFgIfAgUBTWRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMGRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQE0ZGQCHw9kFhhmD2QWAmYPDxYEHwIFDUdsdXRhIHVzaXRhdGEfBQUiUGxhbnQuYXNweD9MYXRpbk5hbWU9R2x1dGEgdXNpdGF0YWRkAgEPDxYCHwIFFEJ1cm1lc2UgVmFybmlzaCBUcmVlZGQCAg8PFgIfAgUEVHJlZWRkAgMPDxYCHwIFBDI1LjBkZAIED2QWAmYPFQICMTACMTJkAgUPDxYCHwIFAU1kZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATBkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUBNGRkAiAPZBYYZg9kFgJmDw8WBB8CBRJHb3NzeXBpdW0gaGlyc3V0dW0fBQUnUGxhbnQuYXNweD9MYXRpbk5hbWU9R29zc3lwaXVtIGhpcnN1dHVtZGQCAQ8PFgIfAgUNVXBsYW5kIENvdHRvbmRkAgIPDxYCHwIFBVNocnViZGQCAw8PFgIfAgUDMi4wZGQCBA9kFgJmDxUCATUCMTBkAgUPDxYCHwIFAUZkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATJkZAIKDw8WAh8CBQExZGQCCw8PFgIfAgUBNGRkAiEPZBYYZg9kFgJmDw8WBB8CBRNHcmluZGVsaWEgaGlyc3V0dWxhHwUFKFBsYW50LmFzcHg%2FTGF0aW5OYW1lPUdyaW5kZWxpYSBoaXJzdXR1bGFkZAIBDw8WAh8CBRJHdW13ZWVkLCBHdW0gUGxhbnRkZAICDw8WAh8CBQlQZXJlbm5pYWxkZAIDDw8WAh8CBQMxLjBkZAIED2QWAmYPFQIBOAIxMWQCBQ8PFgIfAgUBRmRkAgYPDxYCHwIFAkxNZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBMGRkAgoPDxYCHwIFATNkZAILDw8WAh8CBQEzZGQCIg9kFhhmD2QWAmYPDxYEHwIFEkhlbGlhbnRodXMgaHlicmlkcx8FBSdQbGFudC5hc3B4P0xhdGluTmFtZT1IZWxpYW50aHVzIGh5YnJpZHNkZAIBDw8WAh8CBRNQZXJlbm5pYWwgU3VuZmxvd2VyZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDMy42ZGQCBA9kFgJmDxUCATQCMTFkAgUPDxYCHwIFAUZkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQE0ZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFATJkZAIjD2QWGGYPZBYCZg8PFgQfAgUQTGFjdHVjYSBzaWJpcmljYR8FBSVQbGFudC5hc3B4P0xhdGluTmFtZT1MYWN0dWNhIHNpYmlyaWNhZGQCAQ8PFgIfAgUPUHJpY2tseSBsZXR0dWNlZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDMS4wZGQCBA9kFgJmDxUCATABMGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUCTE1kZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFBiZuYnNwO2RkAiQPZBYYZg9kFgJmDw8WBB8CBQ1MZXBpZGl1bSBzcHAuHwUFIlBsYW50LmFzcHg%2FTGF0aW5OYW1lPUxlcGlkaXVtIHNwcC5kZAIBDw8WAh8CBRJQZXJlbm5pYWwgTGVwaWRpdW1kZAICDw8WAh8CBQlQZXJlbm5pYWxkZAIDDw8WAh8CBQMxLjJkZAIED2QWAmYPFQIBMwIxMGQCBQ8PFgIfAgUBRmRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATVkZAIKDw8WAh8CBQEzZGQCCw8PFgIfAgUBMGRkAiUPZBYYZg9kFgJmDw8WBB8CBQ1MaW51bSBoeWJyaWRzHwUFIlBsYW50LmFzcHg%2FTGF0aW5OYW1lPUxpbnVtIGh5YnJpZHNkZAIBDw8WAh8CBQ5QZXJlbm5pYWwgRmxheGRkAgIPDxYCHwIFCVBlcmVubmlhbGRkAgMPDxYCHwIFAzAuOGRkAgQPZBYCZg8VAgE3AjExZAIFDw8WAh8CBQFGZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQE0ZGQCCg8PFgIfAgUBNGRkAgsPDxYCHwIFATRkZAImD2QWGGYPZBYCZg8PFgQfAgUQTGlwYXJpcyBqYXBvbmljYR8FBSVQbGFudC5hc3B4P0xhdGluTmFtZT1MaXBhcmlzIGphcG9uaWNhZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDMC4zZGQCBA9kFgJmDxUCAABkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAVNkZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMWRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQYmbmJzcDtkZAInD2QWGGYPZBYCZg8PFgQfAgUTTG9waG9teXJ0dXMgYnVsbGF0YR8FBShQbGFudC5hc3B4P0xhdGluTmFtZT1Mb3Bob215cnR1cyBidWxsYXRhZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQM1LjBkZAIED2QWAmYPFQIBOAIxMWQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMGRkAgsPDxYCHwIFBiZuYnNwO2RkAigPZBYYZg9kFgJmDw8WBB8CBRFNYWFja2lhIGFtdXJlbnNpcx8FBSZQbGFudC5hc3B4P0xhdGluTmFtZT1NYWFja2lhIGFtdXJlbnNpc2RkAgEPDxYCHwIFIUNoaW5lc2UgWWVsbG93IFdvb2QsIEFtdXIgbWFhY2tpYWRkAgIPDxYCHwIFBVNocnViZGQCAw8PFgIfAgUDNi4wZGQCBA9kFgJmDxUCATQBN2QCBQ8PFgIfAgUBU2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATFkZAIKDw8WAh8CBQEwZGQCCw8PFgIfAgUBNGRkAikPZBYYZg9kFgJmDw8WBB8CBRZNYWNhZGFtaWEgaGlsZGVicmFuZGlpHwUFK1BsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY2FkYW1pYSBoaWxkZWJyYW5kaWlkZAIBDw8WAh8CBQtDZWxlYmVzIG51dGRkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQxNC4wZGQCBA9kFgJmDxUCAjEwAjEyZAIFDw8WAh8CBQFNZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFA01XZWRkAgkPDxYCHwIFATRkZAIKDw8WAh8CBQEwZGQCCw8PFgIfAgUBM2RkAioPZBYYZg9kFgJmDw8WBB8CBRZNYWNhZGFtaWEgaW50ZWdyaWZvbGlhHwUFK1BsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY2FkYW1pYSBpbnRlZ3JpZm9saWFkZAIBDw8WAh8CBRhNYWNhZGFtaWEsIE1hY2FkYW1pYSBudXRkZAICDw8WAh8CBQRUcmVlZGQCAw8PFgIfAgUEMTAuMGRkAgQPZBYCZg8VAgE5AjEyZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQE0ZGQCCg8PFgIfAgUBMGRkAgsPDxYCHwIFATNkZAIrD2QWGGYPZBYCZg8PFgQfAgUUTWFjYWRhbWlhIHRlcm5pZm9saWEfBQUpUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFjYWRhbWlhIHRlcm5pZm9saWFkZAIBDw8WAh8CBRlNYWNhZGFtaWEgTnV0LCBHeW1waWUgbnV0ZGQCAg8PFgIfAgUEVHJlZWRkAgMPDxYCHwIFAzguMGRkAgQPZBYCZg8VAgIxMAIxMmQCBQ8PFgIfAgUBTWRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBNGRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQEyZGQCLA9kFhhmD2QWAmYPDxYEHwIFFU1hY2FkYW1pYSB0ZXRyYXBoeWxsYR8FBSpQbGFudC5hc3B4P0xhdGluTmFtZT1NYWNhZGFtaWEgdGV0cmFwaHlsbGFkZAIBDw8WAh8CBR1RdWVlbnNsYW5kIE51dCwgTWFjYWRhbWlhIG51dGRkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQxMC4wZGQCBA9kFgJmDxUCATkCMTJkAgUPDxYCHwIFAVNkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATRkZAIKDw8WAh8CBQEwZGQCCw8PFgIfAgUBM2RkAi0PZBYYZg9kFgJmDw8WBB8CBRBNYWNsZWF5YSBjb3JkYXRhHwUFJVBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY2xlYXlhIGNvcmRhdGFkZAIBDw8WAh8CBQtQbHVtZSBQb3BweWRkAgIPDxYCHwIFCVBlcmVubmlhbGRkAgMPDxYCHwIFAzIuMGRkAgQPZBYCZg8VAgE0AjEwZAIFDw8WAh8CBQFGZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUCU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMGRkAgoPDxYCHwIFATFkZAILDw8WAh8CBQEwZGQCLg9kFhhmD2QWAmYPDxYEHwIFF01hY2x1cmEgY29jaGluY2hpbmVuc2lzHwUFLFBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY2x1cmEgY29jaGluY2hpbmVuc2lzZGQCAQ8PFgIfAgUfQ29ja3NwdXIgVGhvcm4sIFRob3JueSBDb2Nrc3B1cmRkAgIPDxYCHwIFBVNocnViZGQCAw8PFgIfAgUEMTAuMGRkAgQPZBYCZg8VAgIxMAIxMmQCBQ8PFgIfAgUBU2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQYmbmJzcDtkZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFATRkZAIvD2QWGGYPZBYCZg8PFgQfAgUQTWFjbHVyYSBwb21pZmVyYR8FBSVQbGFudC5hc3B4P0xhdGluTmFtZT1NYWNsdXJhIHBvbWlmZXJhZGQCAQ8PFgIfAgUcT3NhZ2UgT3JhbmdlLCBCb2lzIEQmIzM5O0FyY2RkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQxNS4wZGQCBA9kFgJmDxUCATQBOWQCBQ8PFgIfAgUBTWRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATFkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUGJm5ic3A7ZGQCMA9kFhhmD2QWAmYPDxYEHwIFEU1hY2x1cmEgdGluY3RvcmlhHwUFJlBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY2x1cmEgdGluY3RvcmlhZGQCAQ8PFgIfAgULRnVzdGljIFRyZWVkZAICDw8WAh8CBQRUcmVlZGQCAw8PFgIfAgUEMjAuMGRkAgQPZBYCZg8VAgIxMAIxMmQCBQ8PFgIfAgUBTWRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATJkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUBNGRkAjEPZBYYZg9kFgJmDw8WBB8CBRZNYWNyb21lcmlhIHZpcmlkaWZsb3JhHwUFK1BsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY3JvbWVyaWEgdmlyaWRpZmxvcmFkZAIBDw8WAh8CBSxHaWFudCBUcnVtcGV0cywgVGh1cmJlciYjMzk7cyBnaWFudC10cnVtcGV0c2RkAgIPDxYCHwIFCVBlcmVubmlhbGRkAgMPDxYCHwIFAzAuOWRkAgQPZBYCZg8VAgE2ATlkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATBkZAIKDw8WAh8CBQExZGQCCw8PFgIfAgUGJm5ic3A7ZGQCMg9kFhhmD2QWAmYPDxYEHwIFE01hY3JvdG9taWEgcGVyZW5uaXMfBQUoUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFjcm90b21pYSBwZXJlbm5pc2RkAgEPDxYCHwIFBiZuYnNwO2RkAgIPDxYCHwIFCVBlcmVubmlhbGRkAgMPDxYCHwIFAzAuMGRkAgQPZBYCZg8VAgAAZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQFMZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBMWRkAgoPDxYCHwIFATFkZAILDw8WAh8CBQYmbmJzcDtkZAIzD2QWGGYPZBYCZg8PFgQfAgUPTWFjcm96YW1pYSBzcHAuHwUFJFBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hY3JvemFtaWEgc3BwLmRkAgEPDxYCHwIFEUJ1cnJhd2FuZywgQ3ljYWRzZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDMi4wZGQCBA9kFgJmDxUCAjEwAjEyZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUCTE1kZAIHDw8WAh8CBQNGU05kZAIIDw8WAh8CBQRETVdlZGQCCQ8PFgIfAgUBMmRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQEzZGQCNA9kFhhmD2QWAmYPDxYEHwIFEk1hZGh1Y2EgbG9uZ2lmb2xpYR8FBSdQbGFudC5hc3B4P0xhdGluTmFtZT1NYWRodWNhIGxvbmdpZm9saWFkZAIBDw8WAh8CBRpCdXR0ZXIgVHJlZS4gTWFodWEsIElsbGlwZWRkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQxNi4wZGQCBA9kFgJmDxUCAjEwAjEyZAIFDw8WAh8CBQFNZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBM2RkAgoPDxYCHwIFATJkZAILDw8WAh8CBQEzZGQCNQ9kFhhmD2QWAmYPDxYEHwIFEE1hZGlhIGRlbnNpZm9saWEfBQUlUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFkaWEgZGVuc2lmb2xpYWRkAgEPDxYCHwIFDVNob3d5IFRhcndlZWRkZAICDw8WAh8CBQZBbm51YWxkZAIDDw8WAh8CBQMwLjhkZAIED2QWAmYPFQIAAGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMGRkAgsPDxYCHwIFBiZuYnNwO2RkAjYPZBYYZg9kFgJmDw8WBB8CBRJNYWRpYSBkaXNzaXRpZmxvcmEfBQUnUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFkaWEgZGlzc2l0aWZsb3JhZGQCAQ8PFgIfAgUOR3Jhc3N5IFRhcndlZWRkZAICDw8WAh8CBQZBbm51YWxkZAIDDw8WAh8CBQMwLjhkZAIED2QWAmYPFQIAAGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMGRkAgsPDxYCHwIFBiZuYnNwO2RkAjcPZBYYZg9kFgJmDw8WBB8CBQ1NYWRpYSBlbGVnYW5zHwUFIlBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hZGlhIGVsZWdhbnNkZAIBDw8WAh8CBUBDb21tb24gTWFkaWEsIFNob3d5IHRhcndlZWQsIFNwcmluZyBtYWRpYSwgV2hlZWxlciYjMzk7cyB0YXJ3ZWVkZGQCAg8PFgIfAgUGQW5udWFsZGQCAw8PFgIfAgUDMS41ZGQCBA9kFgJmDxUCATABMGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUCU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMmRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQYmbmJzcDtkZAI4D2QWGGYPZBYCZg8PFgQfAgUPTWFkaWEgZ2xvbWVyYXRhHwUFJFBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hZGlhIGdsb21lcmF0YWRkAgEPDxYCHwIFEE1vdW50YWluIFRhcndlZWRkZAICDw8WAh8CBQZBbm51YWxkZAIDDw8WAh8CBQMwLjhkZAIED2QWAmYPFQIAAGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMWRkAgsPDxYCHwIFBiZuYnNwO2RkAjkPZBYYZg9kFgJmDw8WBB8CBQxNYWRpYSBzYXRpdmEfBQUhUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFkaWEgc2F0aXZhZGQCAQ8PFgIfAgUcQ2hpbGUgVGFyd2VlZCwgQ29hc3QgdGFyd2VlZGRkAgIPDxYCHwIFBkFubnVhbGRkAgMPDxYCHwIFAzAuOGRkAgQPZBYCZg8VAgEwATBkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBM2RkAgoPDxYCHwIFATBkZAILDw8WAh8CBQEwZGQCOg9kFhhmD2QWAmYPDxYEHwIFEk1hZ25vbGlhIGFjdW1pbmF0YR8FBSdQbGFudC5hc3B4P0xhdGluTmFtZT1NYWdub2xpYSBhY3VtaW5hdGFkZAIBDw8WAh8CBSBDdWN1bWJlciBUcmVlLCBDdWN1bWJlciBNYWdub2xpYWRkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQyMC4wZGQCBA9kFgJmDxUCATMBOGQCBQ8PFgIfAgUBTWRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATBkZAIKDw8WAh8CBQEzZGQCCw8PFgIfAgUGJm5ic3A7ZGQCOw9kFhhmD2QWAmYPDxYEHwIFE01hZ25vbGlhIGNhbXBiZWxsaWkfBQUoUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFnbm9saWEgY2FtcGJlbGxpaWRkAgEPDxYCHwIFBiZuYnNwO2RkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQyMC4wZGQCBA9kFgJmDxUCATcCMTBkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATBkZAIKDw8WAh8CBQEwZGQCCw8PFgIfAgUGJm5ic3A7ZGQCPA9kFhhmD2QWAmYPDxYEHwIFEU1hZ25vbGlhIGRlbnVkYXRhHwUFJlBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hZ25vbGlhIGRlbnVkYXRhZGQCAQ8PFgIfAgUZTGlseSBUcmVlLCBZdWxhbiBNYWdub2xpYWRkAgIPDxYCHwIFBFRyZWVkZAIDDw8WAh8CBQQxMC4wZGQCBA9kFgJmDxUCATUBOWQCBQ8PFgIfAgUBU2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATFkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUGJm5ic3A7ZGQCPQ9kFhhmD2QWAmYPDxYEHwIFFU1hZ25vbGlhIGRvZGVjYXBldGFsYR8FBSpQbGFudC5hc3B4P0xhdGluTmFtZT1NYWdub2xpYSBkb2RlY2FwZXRhbGFkZAIBDw8WAh8CBQxCd2FwZW4gbWF3b25kZAICDw8WAh8CBQRUcmVlZGQCAw8PFgIfAgUEMzUuMGRkAgQPZBYCZg8VAgIxMAIxMmQCBQ8PFgIfAgUBU2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMGRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQE0ZGQCPg9kFhhmD2QWAmYPDxYEHwIFFE1hZ25vbGlhIGdyYW5kaWZsb3JhHwUFKVBsYW50LmFzcHg%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%2FTGF0aW5OYW1lPU1hZ25vbGlhIHZpcmdpbmlhbmFkZAIBDw8WAh8CBRlMYXVyZWwgTWFnbm9saWEsIFN3ZWV0YmF5ZGQCAg8PFgIfAgUEVHJlZWRkAgMPDxYCHwIFBDEwLjBkZAIED2QWAmYPFQIBNAE4ZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUCU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMWRkAgoPDxYCHwIFATNkZAILDw8WAh8CBQEyZGQCRg9kFhhmD2QWAmYPDxYEHwIFGk1haG9iZXJiZXJpcyBhcXVpc2FyZ2VudGlpHwUFL1BsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9iZXJiZXJpcyBhcXVpc2FyZ2VudGlpZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjBkZAIED2QWAmYPFQIBNQE5ZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQNGU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMWRkAgoPDxYCHwIFATJkZAILDw8WAh8CBQYmbmJzcDtkZAJHD2QWGGYPZBYCZg8PFgQfAgUSTWFob25pYSBhcXVpZm9saXVtHwUFJ1BsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgYXF1aWZvbGl1bWRkAgEPDxYCHwIFRE9yZWdvbiBHcmFwZSwgSG9sbHlsZWF2ZWQgYmFyYmVycnksIE9yZWdvbiBIb2xseSBHcmFwZSwgT3JlZ29uIEhvbGx5ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjBkZAIED2QWAmYPFQIBNAE4ZAIFDw8WAh8CBQFGZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUDRlNOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBM2RkAgsPDxYCHwIFATNkZAJID2QWGGYPZBYCZg8PFgQfAgUOTWFob25pYSBiZWFsZWkfBQUjUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFob25pYSBiZWFsZWlkZAIBDw8WAh8CBSpCZWFsZSYjMzk7cyBiYXJiZXJyeSwgTGVhdGhlcmxlYWYgIE1haG9uaWFkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzIuMGRkAgQPZBYCZg8VAgE1AThkAgUPDxYCHwIFAVNkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQNGU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBM2RkAgoPDxYCHwIFATJkZAILDw8WAh8CBQEwZGQCSQ9kFhhmD2QWAmYPDxYEHwIFD01haG9uaWEgY29uZnVzYR8FBSRQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIGNvbmZ1c2FkZAIBDw8WAh8CBQYmbmJzcDtkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzEuNWRkAgQPZBYCZg8VAgE2ATlkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAkZTZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATNkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUGJm5ic3A7ZGQCSg9kFhhmD2QWAmYPDxYEHwIFD01haG9uaWEgZmxhdmlkYR8FBSRQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIGZsYXZpZGFkZAIBDw8WAh8CBQYmbmJzcDtkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzIuMGRkAgQPZBYCZg8VAgE3AjEwZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQNGU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBMmRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQYmbmJzcDtkZAJLD2QWGGYPZBYCZg8PFgQfAgUQTWFob25pYSBmb3J0dW5laR8FBSVQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIGZvcnR1bmVpZGQCAQ8PFgIfAgUVRm9ydHVuZSYjMzk7cyBNYWhvbmlhZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjBkZAIED2QWAmYPFQIBNwE5ZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUDRlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATNkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUGJm5ic3A7ZGQCTA9kFhhmD2QWAmYPDxYEHwIFEU1haG9uaWEgZnJlbW9udGlpHwUFJlBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgZnJlbW9udGlpZGQCAQ8PFgIfAgUeTWFob25pYSwgRnJlbW9udCYjMzk7cyBtYWhvbmlhZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjVkZAIED2QWAmYPFQIBNwIxMGQCBQ8PFgIfAgUBU2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAU5kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATNkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUBMmRkAk0PZBYYZg9kFgJmDw8WBB8CBRNNYWhvbmlhIGdhbnBpbmVuc2lzHwUFKFBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgZ2FucGluZW5zaXNkZAIBDw8WAh8CBQYmbmJzcDtkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzAuMGRkAgQPZBYCZg8VAgAAZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQExZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFBiZuYnNwO2RkAk4PZBYYZg9kFgJmDw8WBB8CBRJNYWhvbmlhIGdyYWNpbGlwZXMfBQUnUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFob25pYSBncmFjaWxpcGVzZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMxLjVkZAIED2QWAmYPFQIBNgE5ZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJGU2RkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEyZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFBiZuYnNwO2RkAk8PZBYYZg9kFgJmDw8WBB8CBRBNYWhvbmlhIGdyYWNpbGlzHwUFJVBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgZ3JhY2lsaXNkZAIBDw8WAh8CBRBNZXhpY2FuIEJhcmJlcnJ5ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMxLjVkZAIED2QWAmYPFQIBNwIxMGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBMmRkAgoPDxYCHwIFATBkZAILDw8WAh8CBQYmbmJzcDtkZAJQD2QWGGYPZBYCZg8PFgQfAgUUTWFob25pYSBoYWVtYXRvY2FycGEfBQUpUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFob25pYSBoYWVtYXRvY2FycGFkZAIBDw8WAh8CBR5NZXhpY2FuIEJhcmJlcnJ5LCBSZWQgYmFyYmVycnlkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzMuNmRkAgQPZBYCZg8VAgE3AjEwZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFATJkZAJRD2QWGGYPZBYCZg8PFgQfAgUQTWFob25pYSBqYXBvbmljYR8FBSVQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIGphcG9uaWNhZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjBkZAIED2QWAmYPFQIBNQE5ZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQNGU05kZAIIDw8WAh8CBQFNZGQCCQ8PFgIfAgUBM2RkAgoPDxYCHwIFATJkZAILDw8WAh8CBQYmbmJzcDtkZAJSD2QWGGYPZBYCZg8PFgQfAgUUTWFob25pYSBsb21hcmlpZm9saWEfBQUpUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFob25pYSBsb21hcmlpZm9saWFkZAIBDw8WAh8CBRJDaGluZXNlIGhvbGx5Z3JhcGVkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzUuMGRkAgQPZBYCZg8VAgE4ATlkAgUPDxYCHwIFAU1kZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFATBkZAJTD2QWGGYPZBYCZg8PFgQfAgUTTWFob25pYSBuYXBhdWxlbnNpcx8FBShQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIG5hcGF1bGVuc2lzZGQCAQ8PFgIfAgUGJm5ic3A7ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjVkZAIED2QWAmYPFQIBNQE5ZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFBiZuYnNwO2RkAlQPZBYYZg9kFgJmDw8WBB8CBQ9NYWhvbmlhIG5lcnZvc2EfBQUkUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFob25pYSBuZXJ2b3NhZGQCAQ8PFgIfAgUeT3JlZ29uIEdyYXBlLCBDYXNjYWRlIGJhcmJlcnJ5ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMwLjZkZAIED2QWAmYPFQIBNQE5ZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUDRlNOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFATNkZAJVD2QWGGYPZBYCZg8PFgQfAgUPTWFob25pYSBuZXZpbmlpHwUFJFBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgbmV2aW5paWRkAgEPDxYCHwIFFE5ldmluJiMzOTtzIGJhcmJlcnJ5ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjRkZAIED2QWAmYPFQIBNwIxMGQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUBTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBM2RkAgoPDxYCHwIFATJkZAILDw8WAh8CBQEyZGQCVg9kFhhmD2QWAmYPDxYEHwIFD01haG9uaWEgcGlubmF0YR8FBSRQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIHBpbm5hdGFkZAIBDw8WAh8CBU1DYWxpZm9ybmlhIEJhcmJlcnJ5LCBXYXZ5bGVhZiBiYXJiZXJyeSwgSXNsYW5kIGJhcmJlcnJ5LCBDcmVlcGluZyBIb2xseSBHcmFwZWRkAgIPDxYCHwIFBVNocnViZGQCAw8PFgIfAgUDMS44ZGQCBA9kFgJmDxUCATcBOGQCBQ8PFgIfAgUBRmRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATNkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUBMmRkAlcPZBYYZg9kFgJmDw8WBB8CBQ5NYWhvbmlhIHB1bWlsYR8FBSNQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIHB1bWlsYWRkAgEPDxYCHwIFDkR3YXJmIEJhcmJlcnJ5ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMwLjNkZAIED2QWAmYPFQIBNgE5ZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUCTE1kZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAkRNZGQCCQ8PFgIfAgUBM2RkAgoPDxYCHwIFATJkZAILDw8WAh8CBQEzZGQCWA9kFhhmD2QWAmYPDxYEHwIFDk1haG9uaWEgcmVwZW5zHwUFI1BsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgcmVwZW5zZGQCAQ8PFgIfAgU2Q3JlZXBpbmcgT3JlZ29uIEdyYXBlLCBDcmVlcGluZyBiYXJiZXJyeSwgR3JhcGUgT3JlZ29uZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMwLjNkZAIED2QWAmYPFQIBNAE4ZAIFDw8WAh8CBQFTZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUCU05kZAIIDw8WAh8CBQJETWRkAgkPDxYCHwIFATNkZAIKDw8WAh8CBQEzZGQCCw8PFgIfAgUBNGRkAlkPZBYYZg9kFgJmDw8WBB8CBQ9NYWhvbmlhIHN3YXNleWkfBQUkUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFob25pYSBzd2FzZXlpZGQCAQ8PFgIfAgUdVGV4YXMgTWFob25pYSwgVGV4YXMgYmFyYmVycnlkZAICDw8WAh8CBQVTaHJ1YmRkAgMPDxYCHwIFAzIuNWRkAgQPZBYCZg8VAgE3AjEwZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFBiZuYnNwO2RkAloPZBYYZg9kFgJmDw8WBB8CBRRNYWhvbmlhIHRyaWZvbGlvbGF0YR8FBSlQbGFudC5hc3B4P0xhdGluTmFtZT1NYWhvbmlhIHRyaWZvbGlvbGF0YWRkAgEPDxYCHwIFGk1leGljYW4gQmFyYmVycnksIEFsZ2VyaXRhZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQMyLjBkZAIED2QWAmYPFQIBNgE5ZAIFDw8WAh8CBQYmbmJzcDtkZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQFOZGQCCA8PFgIfAgUCRE1kZAIJDw8WAh8CBQEzZGQCCg8PFgIfAgUBMmRkAgsPDxYCHwIFATRkZAJbD2QWGGYPZBYCZg8PFgQfAgUPTWFob25pYSB4IG1lZGlhHwUFJFBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1haG9uaWEgeCBtZWRpYWRkAgEPDxYCHwIFBiZuYnNwO2RkAgIPDxYCHwIFBVNocnViZGQCAw8PFgIfAgUDMi4wZGQCBA9kFgJmDxUCATYBOWQCBQ8PFgIfAgUGJm5ic3A7ZGQCBg8PFgIfAgUDTE1IZGQCBw8PFgIfAgUDRlNOZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATNkZAIKDw8WAh8CBQEyZGQCCw8PFgIfAgUBMGRkAlwPZBYYZg9kFgJmDw8WBB8CBRVNYWlhbnRoZW11bSBjYW5hZGVuc2UfBQUqUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFpYW50aGVtdW0gY2FuYWRlbnNlZGQCAQ8PFgIfAgUhQ2FuYWRhIEJlYWRydWJ5LCBDYW5hZGEgbWF5Zmxvd2VyZGQCAg8PFgIfAgUJUGVyZW5uaWFsZGQCAw8PFgIfAgUDMC4xZGQCBA9kFgJmDxUCATMBN2QCBQ8PFgIfAgUBRmRkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAkZTZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATFkZAIKDw8WAh8CBQExZGQCCw8PFgIfAgUBMmRkAl0PZBYYZg9kFgJmDw8WBB8CBRVNYWlhbnRoZW11bSBkaWxhdGF0dW0fBQUqUGxhbnQuYXNweD9MYXRpbk5hbWU9TWFpYW50aGVtdW0gZGlsYXRhdHVtZGQCAQ8PFgIfAgUxV2lsZCBMaWx5IE9mIFRoZSBWYWxsZXksIEZhbHNlIGxpbHkgb2YgdGhlIHZhbGxleWRkAgIPDxYCHwIFCVBlcmVubmlhbGRkAgMPDxYCHwIFAzAuMmRkAgQPZBYCZg8VAgEzATdkAgUPDxYCHwIFBiZuYnNwO2RkAgYPDxYCHwIFA0xNSGRkAgcPDxYCHwIFAkZTZGQCCA8PFgIfAgUBTWRkAgkPDxYCHwIFATJkZAIKDw8WAh8CBQExZGQCCw8PFgIfAgUGJm5ic3A7ZGQCXg9kFhhmD2QWAmYPDxYEHwIFFE1hbHBpZ2hpYSBlbWFyZ2luYXRhHwUFKVBsYW50LmFzcHg%2FTGF0aW5OYW1lPU1hbHBpZ2hpYSBlbWFyZ2luYXRhZGQCAQ8PFgIfAgUYQWNlcm9sYSwgQmFyYmFkb3MgQ2hlcnJ5ZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQM0LjBkZAIED2QWAmYPFQICMTACMTJkAgUPDxYCHwIFAU1kZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQE0ZGQCCg8PFgIfAgUBMGRkAgsPDxYCHwIFATJkZAJfD2QWGGYPZBYCZg8PFgQfAgUQTWFscGlnaGlhIGdsYWJyYR8FBSVQbGFudC5hc3B4P0xhdGluTmFtZT1NYWxwaWdoaWEgZ2xhYnJhZGQCAQ8PFgIfAgUSRXNjb2JpbGxvLCBBY2Vyb2xhZGQCAg8PFgIfAgUFU2hydWJkZAIDDw8WAh8CBQM2LjBkZAIED2QWAmYPFQICMTACMTJkAgUPDxYCHwIFAU1kZAIGDw8WAh8CBQNMTUhkZAIHDw8WAh8CBQJTTmRkAggPDxYCHwIFAU1kZAIJDw8WAh8CBQE0ZGQCCg8PFgIfAgUBMWRkAgsPDxYCHwIFATJkZAJgD2QWGGYPZBYCZg8PFgQfAgUSTWFsdXMgYW5ndXN0aWZvbGlhHwUFJ1BsYW50LmFzcHg%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%2FMMta%2F2d8Xs&__VIEWSTATEGENERATOR=C7892775&ctl00%24ContentPlaceHolder1%24txtword={char}'

        
        group_page = requests.post(url, headers = page_headers, data = data)
        soup = BeautifulSoup(group_page.content, "html.parser")
        try:
            table = soup.find(string='Latin Name').parent.parent.parent.find_all('tr')
        except (AttributeError) as e:
            print(e)
            group_page = requests.post(url, headers = page_headers)
            soup = BeautifulSoup(group_page.content, "html.parser")
            table = soup.find(string='Latin Name').parent.parent.parent.find_all('tr')

        html_headers = soup.find(string='Latin Name').parent.parent.parent.find_all('th')
        headers = []

        for header in html_headers:
            headers.append(header.string)

        f = open("plant_data.txt", "a")
        first = True
        for row in table[1:]:
            plant_list = []

            for td in row:
                try:
                    attr = td.string.strip()
                    plant_list.append(attr)
                except:
                    break

            if plant_list == []:
                break

            plant_list.pop(0)
            plant = {}

            for attr, header in zip(plant_list, headers):     
                plant[header] = attr

            if plant == first_plant:
                print('We have scanned this page already')
                next_letter = True
                break
            if plant == {}:
                break
            for key, value in plant.items():
                if key == "Latin Name":
                    f.write(f'{key}:{value}')
                else:
                    f.write(f'|{key}:{value}')
            f.write('\n')
            if first:
                first_plant = plant
                first = False
        f.close()
        print(f'page {page} first plant is {first_plant["Latin Name"]}')
        if next_letter:
            break